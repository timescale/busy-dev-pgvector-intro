-- installing pgai or pgvectorscale will also install pgvector
create extension if not exists ai cascade;
create extension if not exists vectorscale cascade;

DROP TABLE IF EXISTS quotes;
DROP TABLE IF EXISTS summaries;

-- Create a table of quotes
create table quotes
( id int not null primary key generated by default as identity
, quote text
, person text
, embedding vector(1536) -- the vector data type is from the pgvector extension
);

-- create table for LLM summaries
create table summaries
( id int not null primary key generated by default as identity
, summary text
, question text
);

-- Sample data quotes about US cities from histrical figures
insert into quotes (quote, person) values
  ('I love New York, even though it isn''t mine, the way something has to be, a tree or a street or a house, something, anyway, that belongs to me because I belong to it.', 'Truman Capote')
, ('I would give the greatest sunset in the world for one sight of New York''s skyline.', 'Ayn Rand')
, ('In Boston they ask, how much does he know? In New York, how much is he worth? In Philadelphia, who were his parents?', 'Mark Twain')
, ('Los Angeles is 72 suburbs in search of a city.', 'Dorothy Parker')
, ('What you see in Chicago is the triumph of the American middle class.', 'Norman Mailer')
, ('Eventually, I think Chicago will be the most beautiful great city left in the world.', 'Frank Lloyd Wright')
, ('San Francisco is a city where people are never more abroad than when they are at home.', 'Benjamin F. Taylor')
, ('Washington is a city of Southern efficiency and Northern charm.', 'John F. Kennedy')
;

-- test creating an openai embedding for the string "I love New York City"
select openai_embed('text-embedding-3-small', 'I love New York City');

-- test creating an embedding for a new quote and adding it to the table
-- insert into quotes (quote, person, embedding) values ('I love New York City', 'John Doe', generate_embedding('I love New York City'));

-- Task 1: Create embeddings from data in PostgreSQL
-- create embeddings for all rows in the quotes table
UPDATE quotes SET embedding = openai_embed('text-embedding-3-small', quote);

-- Task 2: RAG with openai gpt-4o-mini
-- Function to generate a response using RAG
CREATE OR REPLACE FUNCTION generate_rag_response(query_text TEXT)
RETURNS TEXT AS $$
DECLARE
    context_chunks TEXT;
    response TEXT;
BEGIN
    -- Perform similarity search to find relevant quotes
    SELECT string_agg(quote || ' - ' || person, ' ') INTO context_chunks
    FROM (
        SELECT quote, person
        FROM quotes
        ORDER BY embedding <-> generate_embedding(query_text)
        LIMIT 3
    ) AS relevant_quotes;

    -- Generate a summary using gpt-4o-mini
    SELECT openai_chat_complete(
        'gpt-4o-mini', 
        jsonb_build_array(
            jsonb_build_object('role', 'system', 'content', 'You are a helpful assistant Use only the context provided to answer the question. Also repeat the quotes you use to answer the question'),
            jsonb_build_object('role', 'user', 'content', format('Context: %s\n\nUser Question: %s\n\nAssistant:', context_chunks, query_text))
        )
    )->'choices'->0->'message'->>'content' INTO response;
    
    RETURN response;
END;
$$ LANGUAGE plpgsql;


-- Task 2: Similarity search
-- search for similar quotes using pgvector
SELECT id, quote, person
FROM quotes
ORDER BY embedding <=> (SELECT openai_embed('text-embedding-3-small', 'Empire State of Mind'))
LIMIT 3;


-- Can also encapsulate above query into a function
-- Function to search for similar quotes in pgplsql
CREATE OR REPLACE FUNCTION search_quotes(query text, limit_num int DEFAULT 5)
RETURNS SETOF quotes AS $$
  SELECT * FROM quotes
  ORDER BY embedding <=> generate_embedding(query)
  LIMIT limit_num;
$$ LANGUAGE sql;

-- Test the function
select * from search_quotes('Emipire state of mind');

-- Task 2: RAG with openai gpt-4o-mini
-- Function to generate a response using RAG
CREATE OR REPLACE FUNCTION generate_rag_response(query_text TEXT)
RETURNS TEXT AS $$
DECLARE
    context_chunks TEXT;
    response TEXT;
BEGIN
    -- Perform similarity search to find relevant quotes
    SELECT string_agg(quote || ' - ' || person, ' ') INTO context_chunks
    FROM (
        SELECT quote, person
        FROM quotes
        ORDER BY embedding <-> generate_embedding(query_text)
        LIMIT 3
    ) AS relevant_quotes;

    -- Generate a summary using gpt-4o-mini
    SELECT openai_chat_complete(
        'gpt-4o-mini', 
        jsonb_build_array(
            jsonb_build_object('role', 'system', 'content', 'You are a helpful assistant Use only the context provided to answer the question. Also repeat the quotes you use to answer the question'),
            jsonb_build_object('role', 'user', 'content', format('Context: %s\n\nUser Question: %s\n\nAssistant:', context_chunks, query_text))
        )
    )->'choices'->0->'message'->>'content' INTO response;
    
    RETURN response;
END;
$$ LANGUAGE plpgsql;


-- Test the function
SELECT generate_rag_response('What do people say about New York City?');

-- view summaries
select * from summaries;

-- generate summaries for the following questions about cities based on the quotes table
insert into summaries (question, summary) 
values 
    ('What do people say about New York City?', generate_rag_response('What do people say about New York City?')),
    ('What do people say about San Francisco?', generate_rag_response('What do people say about San Francisco?')),
    ('What do people say about Chicago?', generate_rag_response('What do people say about Chicago?'));